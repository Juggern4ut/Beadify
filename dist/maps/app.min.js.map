{"version":3,"sources":["main.js","partials/_color.js","partials/_colorPicker.js","partials/_drawingShapes.js","partials/_drawResult.js","partials/_fileCooser.js","partials/_getAverageColor.js","partials/_lightbox.js","partials/_loadSampleImage.js","partials/_sizeSlider.js"],"names":["canvas_source","document","getElementById","context_source","getContext","canvas_result","context_result","colorArray","addEventListener","e","preventDefault","drawResult","redrawSelectedColors","colorDrawer","innerHTML","forEach","color","i","tmp","createElement","splice","style","backgroundColor","concat","hsl","hue","saturation","lightness","append","window","onload","push","Color","setHslValue","colorPicker","ColorPicker","lightbox","Lightbox","draggable","setTitle","colorCanvas","addColorButton","display","currentColor","setContent","open","_classCallCheck","this","rgb","red","green","blue","hex","console","warn","rgb2Hsl","rgbToHex","hsl2rgb","test","hexToRgb","newRed","newGreen","newBlue","setRgbValue","max","Math","min","diff","f","n","k","arguments","length","undefined","a","floor","result","exec","parseInt","hexRed","toString","hexGreen","hexBlue","targetColor","smallestIndex","colorDiffs","map","arrayColor","colorDiffByRgb","smallestDiff","el","index","getHueDistance","abs","colorNum","color1","color2","sqrt","hue1","hue2","d","_this","canvas","ctx","canvasWidth","offsetWidth","canvasHeight","offsetHeight","scaleX","scaleY","x","y","j","fillStyle","fillRect","ceil","selecting","circle","cssText","after","remove","rect","getBoundingClientRect","win","ownerDocument","defaultView","mousePosX","pageX","left","pageXOffset","mousePosY","pageY","top","pageYOffset","maxTop","maxBottom","maxLeft","maxRight","circleTop","circleLeft","mousePercentageX","mousePercentageY","round","querySelector","drawBead","context","size","offset","beginPath","arc","lineWidth","PI","strokeStyle","stroke","drawCircle","fill","drawTriangle","moveTo","lineTo","closePath","drawDiamond","drawSquare","val","value","image_url","files","file","URL","createObjectURL","new_image","Image","src","clearRect","canvas_width","canvas_height","naturalHeight","naturalWidth","setAttribute","drawImage","generateDrawing","alert","element_size","compareType","total_rows","total_cols","col","row","image_data","getImageData","data","color_data","getAverageColor","avColor","closesColorFromArray","getColorClosestByHsl","getColorClosestByHue","getColorClosestByRgb","hslColor","filename","name","imageDataArray","counter","tmpColor","alpha","options","isOpen","setDefaultSettings","updateSettings","setupDomElements","setEscapeKeyToCloseLightbox","draggableLightbox","clickOutsideToClose","container","classList","add","animationDuration","additionalClasses","className","inner","openAnimation","closeHandler","title","cursor","WebkitUserSelect","MozUserSelect","msUserSelect","userSelect","onclick","close","closeable","appendingElement","_this2","closeByEscape","keyCode","_this3","target","_this4","isDragging","currentTop","currentLeft","mouseDown","initialDragX","type","touches","initialDragY","mouseMove","tmpX","mouseUp","keepInBounds","boundsOffset","puffer","returnValue","wentAbove","wentBelow","wentLeft","wentRight","offsetTop","innerHeight","bottom","minTop","getComputedStyle","getPropertyValue","offsetLeft","innerWidth","right","minLeft","closeAnimation","opened","closed","destroyed","key","hasOwnProperty","_typeof","Element","HTMLDocument","suboptions","subkey","_this5","_this6","resetPosition","overflow","setTimeout","_this7","drawing","size_slider","oninput"],"mappings":"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","file":"../js/app.min.js","sourcesContent":["let canvas_source = document.getElementById(\"canvas_source\");\nlet context_source = canvas_source.getContext(\"2d\");\n\nlet canvas_result = document.getElementById(\"canvas_result\");\nlet context_result = canvas_result.getContext(\"2d\");\n\nlet colorArray = [];\n\ndocument.getElementById(\"form\").addEventListener(\"submit\", e => {\n  e.preventDefault();\n  drawResult();\n});\n\nconst redrawSelectedColors = () => {\n  const colorDrawer = document.getElementById(\"color-drawer\");\n\n  colorDrawer.innerHTML = \"\";\n\n  colorArray.forEach((color, i) => {\n    let tmp = document.createElement(\"div\");\n    tmp.addEventListener(\"click\", () => {\n      colorArray.splice(i, 1);\n      redrawSelectedColors();\n    });\n    tmp.style.backgroundColor = `hsl(${color.hsl.hue}, ${color.hsl.saturation}%, ${color.hsl.lightness}%)`;\n    colorDrawer.append(tmp);\n  });\n};\n\nwindow.onload = () => {\n  for (let i = 0; i < 10; i++) {\n    colorArray.push(new Color().setHslValue(0, 0, i * 10));\n  }\n\n  redrawSelectedColors();\n\n  let colorPicker = new ColorPicker();\n\n  const lightbox = new Lightbox({\n    draggable: true\n  }).setTitle(\"Colorpicker\");\n\n  const colorCanvas = document.getElementById(\"canvas_colorpicker\");\n  const addColorButton = document.createElement(\"button\");\n  addColorButton.innerHTML = \"Add color\";\n  addColorButton.style.display = \"block\";\n  addColorButton.addEventListener(\"click\", e => {\n    colorArray.push(\n      new Color().setHslValue(\n        colorPicker.currentColor.hue,\n        colorPicker.currentColor.saturation,\n        colorPicker.currentColor.lightness\n      )\n    );\n    redrawSelectedColors();\n  });\n  lightbox.setContent([colorCanvas, addColorButton]);\n\n  document.getElementById(\"color-button\").addEventListener(\"click\", e => {\n    lightbox.open();\n  });\n};\n","/**\r\n * Represents a color. Has functions to convert from\r\n * one format to another and many other functionalities\r\n * like comparing colors, inverting them and so on\r\n * @class Color\r\n * @author {Lukas Meier}\r\n */\r\nclass Color {\r\n  /**\r\n   * Constructs a new color and sets all values to black\r\n   */\r\n  constructor() {\r\n    this.rgb = { red: 0, green: 0, blue: 0 };\r\n    this.hsl = { hue: 0, saturation: 0, lightness: 0 };\r\n    this.hex = \"#000000\";\r\n  }\r\n\r\n  /**\r\n   * Will set the color using red, green and blue values\r\n   * @param {Number} red The red color value (0 - 255)\r\n   * @param {Number} green The green color value (0 - 255)\r\n   * @param {Number} blue The blue color value (0 - 255)\r\n   * @returns {Color} The Color-Object\r\n   */\r\n  setRgbValue(red, green, blue) {\r\n    if (red < 0 || red > 255) {\r\n      console.warn(`Red is out of bounds.`);\r\n      return false;\r\n    }\r\n    if (green < 0 || green > 255) {\r\n      console.warn(`Green is out of bounds.`);\r\n      return false;\r\n    }\r\n    if (blue < 0 || blue > 255) {\r\n      console.warn(`Blue is out of bounds.`);\r\n      return false;\r\n    }\r\n\r\n    this.rgb.red = red;\r\n    this.rgb.green = green;\r\n    this.rgb.blue = blue;\r\n\r\n    const hsl = Color.rgb2Hsl(red, green, blue);\r\n    this.hsl = hsl;\r\n\r\n    const hex = Color.rgbToHex(red, green, blue);\r\n    if (hex) {\r\n      this.hex = hex;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Will set the color using hue, saturation and lightness\r\n   * @param {Number} hue The hue of the color (0 - 360)\r\n   * @param {Number} saturation The saturation of the color (0 - 100)\r\n   * @param {Number} lightness The lightness of the color (0 - 100)\r\n   * @returns {Color} The Color-Object\r\n   */\r\n  setHslValue(hue, saturation, lightness) {\r\n    if (hue > 360 || hue < 0) {\r\n      console.warn(\r\n        `The hue cannot be larger than 360 or negative. It was ${hue}`\r\n      );\r\n      return false;\r\n    }\r\n\r\n    if (saturation > 360 || saturation < 0) {\r\n      console.warn(\r\n        `The saturation cannot be larger than 100 or negative. It was ${saturation}`\r\n      );\r\n      return false;\r\n    }\r\n\r\n    if (lightness > 360 || lightness < 0) {\r\n      console.warn(\r\n        `The lightness  cannot be larger than 100 or negative. It was ${lightness}`\r\n      );\r\n      return false;\r\n    }\r\n\r\n    this.hsl.hue = hue;\r\n    this.hsl.saturation = saturation;\r\n    this.hsl.lightness = lightness;\r\n\r\n    const rgb = Color.hsl2rgb(hue, saturation, lightness);\r\n\r\n    this.rgb = rgb;\r\n\r\n    const hex = Color.rgbToHex(rgb.red, rgb.green, rgb.blue);\r\n    if (hex) {\r\n      this.hex = hex;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Will set the color by using the hex format\r\n   * @param {String} hex The hex-value of the color\r\n   * @returns {Color} The Color-Object\r\n   */\r\n  setHexValue(hex) {\r\n    const regex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\r\n    if (!regex.test(hex)) {\r\n      console.warn(`${hex} is not a correct hex-value`);\r\n      return false;\r\n    }\r\n    this.hex = hex;\r\n\r\n    const rgb = Color.hexToRgb(hex);\r\n    if (rgb) {\r\n      this.rgb = rgb;\r\n      const hsl = Color.rgb2Hsl(rgb.red, rgb.green, rgb.blue);\r\n      this.hsl = hsl;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Will invert the color\r\n   * @returns {Color} The newly inverted Color Object\r\n   */\r\n  invert() {\r\n    let newRed = 255 - this.rgb.red;\r\n    let newGreen = 255 - this.rgb.green;\r\n    let newBlue = 255 - this.rgb.blue;\r\n    this.setRgbValue(newRed, newGreen, newBlue);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Will convert a rgb value to the hsl format\r\n   * @param {Number} red The red color value (0 - 255)\r\n   * @param {Number} green The green color value (0 - 255)\r\n   * @param {Number} blue The blue color value (0 - 255)\r\n   * @returns {Object} An Object containing the color in the hsl format\r\n   */\r\n  static rgb2Hsl(red, green, blue) {\r\n    red /= 255;\r\n    green /= 255;\r\n    blue /= 255;\r\n\r\n    let max = Math.max(red, green, blue);\r\n    let min = Math.min(red, green, blue);\r\n\r\n    let hue;\r\n    let saturation;\r\n    let lightness = (max + min) / 2;\r\n\r\n    if (max == min) {\r\n      // achromatic\r\n      hue = 0;\r\n      saturation = 0;\r\n    } else {\r\n      let diff = max - min;\r\n      saturation =\r\n        lightness > 0.5 ? diff / (2 - max - min) : diff / (max + min);\r\n\r\n      switch (max) {\r\n        case red:\r\n          hue = (green - blue) / diff + (green < blue ? 6 : 0);\r\n          break;\r\n        case green:\r\n          hue = (blue - red) / diff + 2;\r\n          break;\r\n        case blue:\r\n          hue = (red - green) / diff + 4;\r\n          break;\r\n      }\r\n\r\n      hue /= 6;\r\n    }\r\n\r\n    return {\r\n      hue: hue * 360,\r\n      saturation: saturation * 100,\r\n      lightness: lightness * 100\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Will convert a hsl value to the rgb format\r\n   * @param {Number} hue The hue of the color (0 - 360)\r\n   * @param {Number} saturation The percentage of the saturation (0 - 100)\r\n   * @param {Number} lightness The percentage of the lightness (0 - 100)\r\n   */\r\n  static hsl2rgb(hue, saturation, lightness) {\r\n    saturation /= 100;\r\n    lightness /= 100;\r\n\r\n    let a = saturation * Math.min(lightness, 1 - lightness);\r\n    let f = (n, k = (n + hue / 30) % 12) => {\r\n      return lightness - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\r\n    };\r\n\r\n    return {\r\n      red: Math.floor(f(0) * 255),\r\n      green: Math.floor(f(8) * 255),\r\n      blue: Math.floor(f(4) * 255)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Converts the given hex value to rgb\r\n   * @param {String} hex The hex value of the color\r\n   * @returns {Object} The converted red, green and blue values or false if no valid hex was passed;\r\n   */\r\n  static hexToRgb(hex) {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n\r\n    if (!result) {\r\n      console.warn(`${hex} is not a valid hex-value so it cannot be converted`);\r\n      return false;\r\n    }\r\n\r\n    return {\r\n      red: parseInt(result[1], 16),\r\n      green: parseInt(result[2], 16),\r\n      blue: parseInt(result[3], 16)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Converts a rgb value to its corresponding hex value\r\n   * @param {Number} red The red color value (0 - 255)\r\n   * @param {Number} green The green color value (0 - 255)\r\n   * @param {Number} blue The blue color value (0 - 255)\r\n   * @returns {String} The color in a hex value\r\n   */\r\n  static rgbToHex(red, green, blue) {\r\n    if (\r\n      red > 255 ||\r\n      green > 255 ||\r\n      blue > 255 ||\r\n      red < 0 ||\r\n      green < 0 ||\r\n      blue < 0\r\n    ) {\r\n      console.warn(\r\n        `Either the red, green or blue value is out of bounds. It has to be between 0 and 255`\r\n      );\r\n    }\r\n\r\n    let hexRed = red.toString(16);\r\n    let hexGreen = green.toString(16);\r\n    let hexBlue = blue.toString(16);\r\n    hexRed = hexRed.length == 1 ? \"0\" + hexRed : hexRed;\r\n    hexGreen = hexGreen.length == 1 ? \"0\" + hexGreen : hexGreen;\r\n    hexBlue = hexBlue.length == 1 ? \"0\" + hexBlue : hexBlue;\r\n\r\n    return `#${hexRed}${hexGreen}${hexBlue}`;\r\n  }\r\n\r\n  /**\r\n   * Will search an array of colors and return the one that matches the\r\n   * first given color the closest based on the squared rgb difference.\r\n   * @param {Color} color A color that should be searched for\r\n   * @param {Color[]} colorArray An array containing several colors.\r\n   * @returns {Color} The color matching the first parameter the closest will be returned\r\n   */\r\n  static getColorClosestByRgb(targetColor, colorArray) {\r\n    let colorDiffs = colorArray.map(arrayColor => {\r\n      return Color.colorDiffByRgb(arrayColor, targetColor);\r\n    });\r\n\r\n    let smallestDiff = 1000;\r\n    let smallestIndex;\r\n    colorDiffs.map((el, index) => {\r\n      smallestIndex = el < smallestDiff ? index : smallestIndex;\r\n      smallestDiff = el < smallestDiff ? el : smallestDiff;\r\n    });\r\n\r\n    return colorArray[smallestIndex];\r\n  }\r\n\r\n  /**\r\n   * Will search an array of colros and return the one that matches\r\n   * the first given color the closest based on the hue.\r\n   * @param {Color} targetColor The color that should be searched for\r\n   * @param {Color[]} colorArray An array containing colors.\r\n   * @returns {Color} The color matching the first parameter the closest will be returned\r\n   */\r\n  static getColorClosestByHue(targetColor, colorArray) {\r\n    var colorDiffs = colorArray.map(arrayColor => {\r\n      return Color.getHueDistance(arrayColor.hsl.hue, targetColor.hsl.hue);\r\n    });\r\n\r\n    let smallestDiff = 1000;\r\n    let smallestIndex;\r\n    colorDiffs.map((el, index) => {\r\n      smallestIndex = el < smallestDiff ? index : smallestIndex;\r\n      smallestDiff = el < smallestDiff ? el : smallestDiff;\r\n    });\r\n\r\n    return colorArray[smallestIndex];\r\n  }\r\n\r\n  /**\r\n   * Will search an array of colros and return the one that matches\r\n   * the first given color the closest based on the hue, saturation and lightness.\r\n   * @param {Color} targetColor The color that should be searched for\r\n   * @param {Color[]} colorArray An array containing colors.\r\n   * @returns {Color} The color matching the first parameter the closest will be returned\r\n   */\r\n  static getColorClosestByHsl(targetColor, colorArray) {\r\n    var colorDiffs = colorArray.map(\r\n      arrayColor =>\r\n        Math.abs(Color.colorNum(arrayColor) - Color.colorNum(targetColor)) +\r\n        Color.getHueDistance(arrayColor.hsl.hue, targetColor.hsl.hue)\r\n    );\r\n\r\n    let smallestDiff = 1000;\r\n    let smallestIndex;\r\n    colorDiffs.map((el, index) => {\r\n      smallestIndex = el < smallestDiff ? index : smallestIndex;\r\n      smallestDiff = el < smallestDiff ? el : smallestDiff;\r\n    });\r\n\r\n    return colorArray[smallestIndex];\r\n  }\r\n\r\n  /**\r\n   * Calculates the squred difference between all red, green and blue values\r\n   * @param {Color} color1 The first color\r\n   * @param {Color} color2 The second color\r\n   * @returns {Number} The calculated difference\r\n   */\r\n  static colorDiffByRgb(color1, color2) {\r\n    return Math.sqrt(\r\n      (color1.rgb.red - color2.rgb.red) * (color1.rgb.red - color2.rgb.red) +\r\n        (color1.rgb.green - color2.rgb.green) *\r\n          (color1.rgb.green - color2.rgb.green) +\r\n        (color1.rgb.blue - color2.rgb.blue) *\r\n          (color1.rgb.blue - color2.rgb.blue)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Will return the distance between 2 hues\r\n   * @param {Number} hue1 The hue of the first color\r\n   * @param {Number} hue2 The hue of the second color\r\n   * @returns {Number} The distance between the hues\r\n   */\r\n  static getHueDistance(hue1, hue2) {\r\n    d = Math.abs(hue1 - hue2);\r\n    return d > 180 ? 360 - d : d;\r\n  }\r\n\r\n  /**\r\n   * Converts a number to it's number value\r\n   * @param {Color} color The color that should be converted\r\n   * @returns {Number}\r\n   */\r\n  static colorNum(color) {\r\n    let factorSat = 1;\r\n    let factorLi = 1;\r\n    return color.hsl.saturation * factorSat + color.hsl.lightness * factorLi;\r\n  }\r\n}\r\n","class ColorPicker {\r\n  constructor() {\r\n    this.canvas = document.getElementById(\"canvas_colorpicker\");\r\n    this.ctx = this.canvas.getContext(\"2d\");\r\n    this.canvasWidth = this.canvas.offsetWidth;\r\n    this.canvasHeight = this.canvas.offsetHeight;\r\n\r\n    this.scaleX = this.canvasWidth / 360;\r\n    this.scaleY = this.canvasHeight / 100;\r\n\r\n    this.currentColor = null;\r\n\r\n    let x = 0;\r\n    let y = 0;\r\n\r\n    let hue = 0;\r\n    let saturation = 100;\r\n    let lightness = 100;\r\n\r\n    for (let i = 0; i < 100; i++) {\r\n      for (let j = 0; j < 360; j++) {\r\n        this.ctx.fillStyle = `hsl(${hue}, ${saturation}%, ${lightness}%)`;\r\n        this.ctx.fillRect(\r\n          x,\r\n          y,\r\n          Math.ceil(this.scaleX + 1),\r\n          Math.ceil(this.scaleY + 1)\r\n        );\r\n        x += this.scaleX;\r\n        hue = j;\r\n      }\r\n      lightness -= 1;\r\n      x = 0;\r\n      y += 1;\r\n    }\r\n\r\n    this.canvas.addEventListener(\"mousedown\", e => {\r\n      this.selecting = true;\r\n      this.circle = document.createElement(\"div\");\r\n      this.circle.style.cssText =\r\n        \"background-color: red; border-radius: 50%; width: 10px; height: 10px; position: fixed; top: 0; left: 0; transform: translate(-50%, -50%); border: 1px solid #000;\";\r\n\r\n      this.canvas.after(this.circle);\r\n    });\r\n\r\n    document.addEventListener(\"mouseup\", () => {\r\n      if (!this.selecting) return false;\r\n      this.selecting = false;\r\n      this.circle.remove();\r\n    });\r\n\r\n    document.addEventListener(\"mousemove\", e => {\r\n      if (!this.selecting) return false;\r\n\r\n      let rect = this.canvas.getBoundingClientRect();\r\n      let win = this.canvas.ownerDocument.defaultView;\r\n\r\n      let mousePosX = e.pageX - rect.left + win.pageXOffset;\r\n      let mousePosY = e.pageY - rect.top + win.pageYOffset;\r\n\r\n      mousePosX = mousePosX < 0 ? 0 : mousePosX;\r\n      mousePosY = mousePosY < 0 ? 0 : mousePosY;\r\n\r\n      let maxTop = rect.top + win.pageYOffset;\r\n      let maxBottom = rect.top + win.pageYOffset + this.canvas.offsetHeight;\r\n\r\n      let maxLeft = rect.left + win.pageXOffset;\r\n      let maxRight = rect.left + win.pageXOffset + this.canvas.offsetWidth;\r\n\r\n      let circleTop = e.pageY;\r\n      let circleLeft = e.pageX;\r\n\r\n      if (e.pageY < maxTop) {\r\n        circleTop = maxTop;\r\n      } else if (e.pageY > maxBottom) {\r\n        circleTop = maxBottom;\r\n      }\r\n\r\n      if (e.pageX < maxLeft) {\r\n        circleLeft = maxLeft;\r\n      } else if (e.pageX > maxRight) {\r\n        circleLeft = maxRight;\r\n      }\r\n\r\n      this.circle.style.top = circleTop + \"px\";\r\n      this.circle.style.left = circleLeft + \"px\";\r\n\r\n      mousePosX = mousePosX > this.canvasWidth ? this.canvasWidth : mousePosX;\r\n      mousePosY = mousePosY > this.canvasHeight ? this.canvasHeight : mousePosY;\r\n\r\n      mousePercentageX = mousePosX / this.canvasWidth;\r\n      mousePercentageY = mousePosY / this.canvasHeight;\r\n\r\n      let hue = Math.round(360 * mousePercentageX);\r\n      let lightness = Math.round(100 - 100 * mousePercentageY);\r\n\r\n      let a = document.querySelector(\".lightbox__data\");\r\n      a.style.backgroundColor = `hsl(${hue}, 100%, ${lightness}%)`;\r\n\r\n      this.currentColor = { hue: hue, saturation: 100, lightness: lightness };\r\n\r\n      this.circle.style.backgroundColor = `hsl(${hue}, 100%, ${lightness}%)`;\r\n    });\r\n  }\r\n}\r\n","const drawBead = (context, x, y, size, color) => {\r\n  let lineWidth = 7;\r\n  let offset = size / 2;\r\n  context.beginPath();\r\n  context.arc(\r\n    x + offset,\r\n    y + offset,\r\n    offset - lineWidth/2,\r\n    0,\r\n    2 * Math.PI\r\n  );\r\n  context.lineWidth = lineWidth;\r\n  context.strokeStyle = color;\r\n  context.stroke();\r\n};\r\n\r\nconst drawCircle = (context, x, y, size, color) => {\r\n  let offset = size / 2;\r\n  context.beginPath();\r\n  context.arc(x + offset, y + offset, offset, 0, 2 * Math.PI);\r\n  context.fillStyle = color;\r\n  context.fill();\r\n};\r\n\r\nconst drawTriangle = (context, x, y, size, color) => {\r\n  let offset = size / 2;\r\n  context.beginPath();\r\n  context.moveTo(x + offset, y);\r\n  context.lineTo(x + size, y + size);\r\n  context.lineTo(x, y + size);\r\n  context.closePath();\r\n  context.fillStyle = color;\r\n  context.fill();\r\n};\r\n\r\nconst drawDiamond = (context, x, y, size, color) => {\r\n  let offset = size / 2;\r\n  context.beginPath();\r\n  context.moveTo(x + offset, y);\r\n  context.lineTo(x + size, y + offset);\r\n  context.lineTo(x + offset, y + size);\r\n  context.lineTo(x, y + offset);\r\n  context.closePath();\r\n  context.fillStyle = color;\r\n  context.fill();\r\n};\r\n\r\nconst drawSquare = (context, x, y, size, color) => {\r\n  context.fillStyle = color;\r\n  context.fillRect(x, y, size, size);\r\n};\r\n","const drawResult = () => {\r\n  let val = parseInt(document.getElementById(\"element_size\").value);\r\n  \r\n  if (typeof val === \"number\" && val > 2) {\r\n    let file_chooser = document.getElementById(\"fileChooser\");\r\n    let files = file_chooser.files;\r\n    let image_url;\r\n    if (files.length) {\r\n      let file = files[0];\r\n      image_url = window.URL.createObjectURL(file);\r\n    } else {\r\n      image_url = \"../res/sample.jpg\";\r\n    }\r\n\r\n    let new_image = new Image();\r\n    new_image.src = image_url;\r\n\r\n    context_source.clearRect(0, 0, canvas_width, canvas_height);\r\n    new_image.addEventListener(\"load\", () => {\r\n      canvas_height = new_image.naturalHeight;\r\n      canvas_width = new_image.naturalWidth;\r\n\r\n      canvas_source.setAttribute(\"height\", canvas_height);\r\n      canvas_source.setAttribute(\"width\", canvas_width);\r\n\r\n      canvas_result.setAttribute(\"height\", canvas_height);\r\n      canvas_result.setAttribute(\"width\", canvas_width);\r\n\r\n      context_source.drawImage(new_image, 0, 0);\r\n      generateDrawing(val);\r\n    });\r\n  } else {\r\n    alert(\"Please enter a valid number larger than 2\");\r\n  }\r\n};\r\n\r\nconst generateDrawing = element_size => {\r\n  let compareType = document.getElementById(\"compare_type\").value;\r\n\r\n  context_result.clearRect(0, 0, canvas_width, canvas_height);\r\n\r\n  const total_rows = Math.floor(canvas_width / element_size);\r\n  const total_cols = Math.floor(canvas_height / element_size);\r\n  let x = 0;\r\n  let y = 0;\r\n\r\n  for (let col = 0; col < total_cols; col++) {\r\n    for (let row = 0; row < total_rows; row++) {\r\n      let image_data = context_source.getImageData(\r\n        x,\r\n        y,\r\n        element_size,\r\n        element_size\r\n      ).data;\r\n\r\n      let color_data = getAverageColor(image_data);\r\n      let avColor = new Color().setRgbValue(\r\n        color_data.red,\r\n        color_data.green,\r\n        color_data.blue\r\n      );\r\n\r\n      let closesColorFromArray;\r\n      if (compareType === \"hsl\") {\r\n        closesColorFromArray = Color.getColorClosestByHsl(avColor, colorArray);\r\n      } else if (compareType === \"hue\") {\r\n        closesColorFromArray = Color.getColorClosestByHue(avColor, colorArray);\r\n      } else {\r\n        closesColorFromArray = Color.getColorClosestByRgb(avColor, colorArray);\r\n      }\r\n\r\n      let hslColor = `hsl(${closesColorFromArray.hsl.hue}, ${closesColorFromArray.hsl.saturation}%, ${closesColorFromArray.hsl.lightness}%)`;\r\n\r\n      drawCircle(context_result, x, y, element_size, hslColor);\r\n\r\n      x += element_size;\r\n    }\r\n    x = 0;\r\n    y += element_size;\r\n  }\r\n};\r\n","document.getElementById(\"fileChooser\").addEventListener(\"change\", e => {\r\n  let filename = document.getElementById(\"fileChooser\").files[0].name;\r\n  if (filename) {\r\n    document.querySelector(\".form__label\").innerHTML = filename;\r\n  }\r\n});\r\n","const getAverageColor = imageDataArray => {\r\n  let counter = 0;\r\n  let tmpColor = {\r\n    red: 0,\r\n    green: 0,\r\n    blue: 0,\r\n    alpha: 0\r\n  };\r\n  for (let i = 0; i < imageDataArray.length; i++) {\r\n    if (i % 4 === 0) {\r\n      tmpColor.red += imageDataArray[i];\r\n    } else if (i % 4 === 1) {\r\n      tmpColor.green += imageDataArray[i];\r\n    } else if (i % 4 === 2) {\r\n      tmpColor.blue += imageDataArray[i];\r\n    } else if (i % 4 === 3) {\r\n      tmpColor.alpha += imageDataArray[i];\r\n      counter++;\r\n    }\r\n  }\r\n  let finalColor = {\r\n    red: tmpColor.red / counter,\r\n    green: tmpColor.green / counter,\r\n    blue: tmpColor.blue / counter,\r\n    alpha: tmpColor.alpha / counter\r\n  };\r\n  return finalColor;\r\n};\r\n","/**\r\n * Represents a lightbox that can be used to display information\r\n * to the user by being displayed on the top layer of the page\r\n *\r\n * @class Lightbox\r\n */\r\nclass Lightbox {\r\n  /**\r\n   * Sets up the basic structure and DOM of the lightbox\r\n   * @author {Lukas Meier}\r\n   * @param {Object} options The options to configure the lightbox\r\n   *  @param {(String|String[])} options.additionalClasses Additional classes that will be added to the lightbox\r\n   *  @param {Boolean} options.closeable If set to false, all triggers to close the lightbox will be automatically overwritten\r\n   *  @param {Boolean} options.draggable If set to true, the lightbox can be dragged by grabbing the titlebar\r\n   *  @param {Boolean} options.closeHandler If set to false, the lightbox will have no close button in the top right\r\n   *  @param {Boolean} options.closeByEscape If set to false, the lightbox can't be closed by pressing escape\r\n   *  @param {Boolean} options.clickOutsideToClose If set to true, the lightbox can be closed by clicking outside of it\r\n   *  @param {String} options.openAnimation The animation that should be used to open the lightbox. Use: grow, fadein, jelly or fadedown\r\n   *  @param {String} options.closeAnimation The animation that should be used to close the lightbox. Use: shrink, fadeout or fadeup\r\n   *  @param {Number} options.animationDuration The duration of the animation in milliseconds\r\n   *  @param {Number} options.boundsOffset If the lightbox is dragged outside of the page it will snap back with this margin\r\n   *  @param {Boolean} options.keepInBounds If set to true, the lightbox will snap back into bounds if dragged outside\r\n   *  @param {HTMLElement} options.appendingElement The Lightbox will be appended to this element. The body is strongly recommended here, as it is the default anyways.\r\n   *  @param {Function} options.open Callback that gets called when the lightbox starts opening\r\n   *  @param {Function} options.opened Callback that gets called when the lightbox finished opening\r\n   *  @param {Function} options.close Callback that gets called when the lightbox starts closing\r\n   *  @param {Function} options.closed Callback that gets called when the lightbox finished closing\r\n   *  @param {Function} options.destroyed Callback that gets called when the lightbox is destroyed\r\n   * @returns {Lightbox} The created lightbox object.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    this.isOpen = false;\r\n\r\n    this.setDefaultSettings();\r\n    this.updateSettings(options);\r\n\r\n    this.setupDomElements();\r\n\r\n    this.setEscapeKeyToCloseLightbox();\r\n    this.draggableLightbox();\r\n    this.clickOutsideToClose();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Will create the DOM-Elements and place them at the end of the body\r\n   * @author {Lukas Meier}\r\n   * @returns {void}\r\n   */\r\n  setupDomElements() {\r\n    this.container = document.createElement(\"div\");\r\n    this.container.classList.add(\"lightbox\");\r\n    this.container.style.animationDuration = `${this.options.animationDuration}ms`;\r\n\r\n    if (\r\n      this.options.additionalClasses &&\r\n      this.options.additionalClasses.length\r\n    ) {\r\n      if (typeof this.options.additionalClasses === \"string\") {\r\n        this.container.classList.add(this.options.additionalClasses);\r\n      } else {\r\n        this.options.additionalClasses.forEach(className => {\r\n          this.container.classList.add(className);\r\n        });\r\n      }\r\n    }\r\n\r\n    this.inner = document.createElement(\"div\");\r\n    this.inner.classList.add(\"lightbox__inner\");\r\n    this.inner.classList.add(`lightbox__inner--${this.options.openAnimation}`);\r\n    this.inner.style.animationDuration = `${this.options.animationDuration}ms`;\r\n\r\n    this.closeHandler = document.createElement(\"div\");\r\n    this.closeHandler.classList.add(\"lightbox__close-handler\");\r\n\r\n    this.title = document.createElement(\"p\");\r\n    this.title.classList.add(\"lightbox__title\");\r\n\r\n    if (this.options.draggable) {\r\n      this.title.style.cursor = \"move\";\r\n      this.title.style.WebkitUserSelect = \"none\";\r\n      this.title.style.MozUserSelect = \"none\";\r\n      this.title.style.msUserSelect = \"none\";\r\n      this.title.style.userSelect = \"none\";\r\n    }\r\n\r\n    this.closeHandler.onclick = () => {\r\n      this.close();\r\n    };\r\n\r\n    this.data = document.createElement(\"div\");\r\n    this.data.classList.add(\"lightbox__data\");\r\n\r\n    if (this.options.closeHandler && this.options.closeable) {\r\n      this.inner.append(this.closeHandler);\r\n    }\r\n\r\n    this.inner.append(this.title);\r\n    this.inner.append(this.data);\r\n    this.container.append(this.inner);\r\n    this.options.appendingElement.append(this.container);\r\n  }\r\n\r\n  /**\r\n   * Adds an eventlistener to the document to\r\n   * allow the user to close the lightbox\r\n   * by pressing the escape key\r\n   * @author {Lukas Meier}\r\n   * @returns {Boolean} true if eventlistener has been set, false otherwise\r\n   */\r\n  setEscapeKeyToCloseLightbox() {\r\n    if (!this.options.closeByEscape || !this.options.closeable) return false;\r\n    document.addEventListener(\"keydown\", e => {\r\n      if (e.keyCode === 27 && this.isOpen) {\r\n        this.close();\r\n      }\r\n    });\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Sets a clicklistener to close the lightbox by\r\n   * clicking outside of it.\r\n   * @author {Lukas Meier}\r\n   * @returns {Boolean} true if eventlistener has been set, false otherwise\r\n   */\r\n  clickOutsideToClose() {\r\n    if (!this.options.clickOutsideToClose || !this.options.closeable)\r\n      return false;\r\n    this.container.addEventListener(\"click\", e => {\r\n      if (e.target === this.container) {\r\n        this.close();\r\n      }\r\n    });\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Will add several eventlisteners that allow\r\n   * the user to drag the lightbox by dragging\r\n   * the title bar.\r\n   * @author {Lukas Meier}\r\n   * @returns {Boolean} true if eventlisteners have been set, false otherwise\r\n   */\r\n  draggableLightbox() {\r\n    if (!this.options.draggable) return false;\r\n\r\n    this.isDragging = false;\r\n    this.currentTop = 0;\r\n    this.currentLeft = 0;\r\n\r\n    const mouseDown = e => {\r\n      this.isDragging = true;\r\n      this.initialDragX = e.type === \"touchmove\" ? e.touches[0].pageX : e.pageX;\r\n      this.initialDragY = e.type === \"touchmove\" ? e.touches[0].pageY : e.pageY;\r\n    };\r\n\r\n    const mouseMove = e => {\r\n      if (!this.isDragging) return false;\r\n\r\n      e.preventDefault();\r\n\r\n      let tmpX = e.type === \"touchmove\" ? e.touches[0].pageX : e.pageX;\r\n      let tmpY = e.type === \"touchmove\" ? e.touches[0].pageY : e.pageY;\r\n\r\n      const top = tmpY - this.initialDragY + this.currentTop;\r\n      const left = tmpX - this.initialDragX + this.currentLeft;\r\n\r\n      this.inner.style.top = `${top}px`;\r\n      this.inner.style.left = `${left}px`;\r\n    };\r\n\r\n    const mouseUp = e => {\r\n      if (!this.isDragging) return false;\r\n      this.isDragging = false;\r\n      this.currentTop = parseInt(this.inner.style.top);\r\n      this.currentLeft = parseInt(this.inner.style.left);\r\n\r\n      this.currentTop = this.currentTop ? this.currentTop : 0;\r\n      this.currentLeft = this.currentLeft ? this.currentLeft : 0;\r\n\r\n      if (this.options.keepInBounds) {\r\n        this.keepInBounds(this.options.boundsOffset);\r\n      }\r\n    };\r\n\r\n    this.title.addEventListener(\"mousedown\", e => mouseDown(e));\r\n    this.title.addEventListener(\"touchstart\", e => mouseDown(e), false);\r\n\r\n    document\r\n      .querySelector(\"body\")\r\n      .addEventListener(\"mousemove\", e => mouseMove(e));\r\n    document\r\n      .querySelector(\"body\")\r\n      .addEventListener(\"touchmove\", e => mouseMove(e));\r\n\r\n    document.querySelector(\"body\").addEventListener(\"mouseup\", e => mouseUp(e));\r\n    document\r\n      .querySelector(\"body\")\r\n      .addEventListener(\"touchend\", e => mouseUp(e));\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Will reset the draggin position of the lightbox\r\n   * @author {Lukas Meier}\r\n   * @returns {Boolean} true if position has been reset, false otherwise\r\n   */\r\n  resetPosition() {\r\n    if (this.options.draggable) {\r\n      this.inner.style.top = 0;\r\n      this.inner.style.left = 0;\r\n      this.currentLeft = 0;\r\n      this.currentTop = 0;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Will check if the Lightbox is outside of the window\r\n   * and force it back inside. This way, the user cannot\r\n   * drag the handler outsite of the bounds.\r\n   * @author {Lukas Meier}\r\n   * @param {Number} puffer If the lightbox is out of bounds, it will have this number as a margin to the bounds.\r\n   * @returns {Object} Containing which bounds have been crossed\r\n   */\r\n  keepInBounds(puffer) {\r\n    let returnValue = {\r\n      wentAbove: false,\r\n      wentBelow: false,\r\n      wentLeft: false,\r\n      wentRight: false\r\n    };\r\n\r\n    //Prevent the box from going above the page bounds\r\n    if (this.inner.offsetTop < 0) {\r\n      const tmp = this.currentTop + Math.abs(this.inner.offsetTop) + puffer;\r\n      this.inner.style.top = `${tmp}px`;\r\n      this.currentTop = tmp;\r\n      returnValue.wentAbove = true;\r\n    }\r\n\r\n    //Prevent the box from going below the page bounds\r\n    else if (\r\n      this.inner.offsetTop + this.inner.offsetHeight >\r\n      window.innerHeight\r\n    ) {\r\n      const bottom = this.inner.offsetTop + this.inner.offsetHeight + puffer;\r\n      const diff = window.innerHeight - bottom;\r\n      const tmp = this.currentTop + diff;\r\n      this.inner.style.top = `${tmp}px`;\r\n      this.currentTop = tmp;\r\n\r\n      const marginTop = parseInt(\r\n        window.getComputedStyle(this.inner, null).getPropertyValue(\"margin-top\")\r\n      );\r\n\r\n      const minTop = (marginTop - puffer) * -1;\r\n      if (this.currentTop < minTop) {\r\n        this.currentTop = minTop;\r\n        this.inner.style.top = `${minTop}px`;\r\n      }\r\n\r\n      returnValue.wentBelow = true;\r\n    }\r\n\r\n    //Prevent the box from going left of the page bounds\r\n    if (this.inner.offsetLeft < 0) {\r\n      const tmp = this.currentLeft + Math.abs(this.inner.offsetLeft) + puffer;\r\n      this.inner.style.left = `${tmp}px`;\r\n      this.currentLeft = tmp;\r\n      returnValue.wentLeft = true;\r\n    }\r\n\r\n    //Prevent the box from going right of the page bounds\r\n    else if (\r\n      this.inner.offsetLeft + this.inner.offsetWidth >\r\n      window.innerWidth\r\n    ) {\r\n      const right = this.inner.offsetLeft + this.inner.offsetWidth + puffer;\r\n      const diff = window.innerWidth - right;\r\n      const tmp = this.currentLeft + diff;\r\n      this.inner.style.left = `${tmp}px`;\r\n      this.currentLeft = tmp;\r\n\r\n      const marginLeft = parseInt(\r\n        window\r\n          .getComputedStyle(this.inner, null)\r\n          .getPropertyValue(\"margin-left\")\r\n      );\r\n\r\n      const minLeft = (marginLeft - puffer) * -1;\r\n      if (this.currentLeft < minLeft) {\r\n        this.currentLeft = minLeft;\r\n        this.inner.style.left = `${minLeft}px`;\r\n      }\r\n\r\n      returnValue.wentRight = true;\r\n    }\r\n\r\n    return returnValue;\r\n  }\r\n\r\n  /**\r\n   * Sets the settings to the default values. This is called\r\n   * on initialisation and can be used to reset all settings.\r\n   * @author {Lukas Meier}\r\n   * @returns {void}\r\n   */\r\n  setDefaultSettings() {\r\n    this.options = {};\r\n    this.options.additionalClasses = [];\r\n    this.options.closeable = true;\r\n    this.options.draggable = false;\r\n    this.options.closeHandler = true;\r\n    this.options.closeByEscape = true;\r\n    this.options.openAnimation = \"fadedown\";\r\n    this.options.closeAnimation = \"fadeup\";\r\n    this.options.clickOutsideToClose = true;\r\n    this.options.animationDuration = 500;\r\n    this.options.boundsOffset = 20;\r\n    this.options.keepInBounds = true;\r\n    this.options.appendingElement = document.querySelector(\"body\");\r\n    this.options.open = () => {};\r\n    this.options.opened = () => {};\r\n    this.options.close = () => {};\r\n    this.options.closed = () => {};\r\n    this.options.destroyed = () => {};\r\n  }\r\n\r\n  /**\r\n   * Overrites default settings with custom ones.\r\n   * @author {Lukas Meier}\r\n   * @param {Object} options - Optional settings object.\r\n   * @returns {void}\r\n   */\r\n  updateSettings(options) {\r\n    for (let key in options) {\r\n      if (key === \"appendingElement\" && !options.appendingElement) {\r\n        console.warn(\r\n          \"The Element to append the lightbox to, could not be found. It will be appended to the body instead.\"\r\n        );\r\n      }\r\n\r\n      if (options.hasOwnProperty(key)) {\r\n        if (typeof options[key] === \"object\") {\r\n          if (\r\n            options[key] instanceof Element ||\r\n            options[key] instanceof HTMLDocument\r\n          ) {\r\n            this.options[key] = options[key];\r\n          } else {\r\n            let suboptions = options[key];\r\n            for (let subkey in suboptions) {\r\n              if (suboptions.hasOwnProperty(subkey)) {\r\n                this.options[key][subkey] = suboptions[subkey];\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          this.options[key] = options[key];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Will set the content of the lightbox\r\n   * @author {Lukas Meier}\r\n   * @param {(String|Object)} data The data to display. Can be a String, a HTMLObject or an Array of either.\r\n   * @param {String} title The title displayed in the top left of the lightbox\r\n   * @returns {Lightbox} The current Lightbox-Object\r\n   */\r\n  setContent(data) {\r\n    this.data.innerHTML = \"\";\r\n\r\n    if (typeof data === \"object\") {\r\n      if (data.length) {\r\n        data.forEach(el => {\r\n          if (typeof el === \"string\") {\r\n            this.data.innerHTML += el;\r\n          } else {\r\n            this.data.append(el);\r\n          }\r\n        });\r\n      } else {\r\n        this.data.append(data);\r\n      }\r\n    } else {\r\n      this.data.innerHTML = data;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Will set the Title of the Lightbox\r\n   * @param {String} title The title to set in the lightbox\r\n   * @author {Lukas Meier}\r\n   * @returns {Lightbox} The current Lightbox-Object\r\n   */\r\n  setTitle(title) {\r\n    title = title ? title : \"\";\r\n    this.title.innerHTML = title;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gives the lightbox the --open modifier which\r\n   * is used by CSS to make the lightbox visible\r\n   * @author {Lukas Meier}\r\n   * @returns {Lightbox} The current Lightbox-Object\r\n   */\r\n  open() {\r\n    this.options.open();\r\n    this.resetPosition();\r\n    this.container.classList.add(\"lightbox--open\");\r\n    this.container.classList.add(\"lightbox--opening\");\r\n    document.querySelector(\"body, html\").style.overflow = \"hidden\";\r\n    setTimeout(() => {\r\n      this.container.classList.remove(\"lightbox--opening\");\r\n      this.isOpen = true;\r\n      this.options.opened();\r\n    }, this.options.animationDuration);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes the --open modifier from the lightbox\r\n   * is used by CSS to make the lightbox visible\r\n   * @author {Lukas Meier}\r\n   * @returns {Lightbox} The current Lightbox-Object\r\n   */\r\n  close() {\r\n    this.options.close();\r\n    this.inner.classList.add(`lightbox__inner--${this.options.closeAnimation}`);\r\n    this.container.classList.add(\"lightbox--closing\");\r\n    setTimeout(() => {\r\n      this.container.classList.remove(\"lightbox--open\");\r\n      this.container.classList.remove(\"lightbox--closing\");\r\n      this.isOpen = false;\r\n      document.querySelector(\"body, html\").style.overflow = \"auto\";\r\n      this.inner.classList.remove(\r\n        `lightbox__inner--${this.options.closeAnimation}`\r\n      );\r\n      this.options.closed();\r\n    }, this.options.animationDuration);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Will remove all traces of the lightbox from the DOM\r\n   * and calls the destroyed callback.\r\n   * @author {Lukas Meier}\r\n   * @returns {void}\r\n   */\r\n  destroy() {\r\n    this.container.remove();\r\n    this.inner.remove();\r\n    this.closeHandler.remove();\r\n    this.title.remove();\r\n    this.data.remove();\r\n    this.options.destroyed();\r\n  }\r\n}\r\n","let drawing = new Image();\r\nlet canvas_width = 0;\r\nlet canvas_height = 0;\r\n\r\ndrawing.src = \"../res/sample.jpg\";\r\n\r\ndrawing.addEventListener(\"load\", () => {\r\n  canvas_height = drawing.naturalHeight;\r\n  canvas_width = drawing.naturalWidth;\r\n\r\n  canvas_source.setAttribute(\"height\", canvas_height);\r\n  canvas_source.setAttribute(\"width\", canvas_width);\r\n\r\n  canvas_result.setAttribute(\"height\", canvas_height);\r\n  canvas_result.setAttribute(\"width\", canvas_width);\r\n\r\n  context_source.drawImage(drawing, 0, 0);\r\n  generateDrawing(20);\r\n});\r\n","const size_slider = document.getElementById(\"size_slider\");\r\nsize_slider.oninput = () => {\r\n  document.getElementById(\"element_size\").value = size_slider.value;\r\n};\r\n\r\nsize_slider.addEventListener(\"change\", () => {\r\n  drawResult();\r\n});\r\n"]}