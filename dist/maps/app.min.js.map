{"version":3,"sources":["main.js","partials/_addMonochromaticColorSets.js","partials/_colorpickerLightbox.js","partials/_drawCircle.js","partials/_drawResult.js","partials/_drawSelectedColors.js","partials/_fileCooser.js","partials/_getAverageColor.js","partials/_initInfoLightbox.js","partials/_loadSampleImage.js","partials/_sizeSlider.js","partials/vendor/_color.js","partials/vendor/_colorPicker.js","partials/vendor/_lightbox.js"],"names":["canvas_source","document","getElementById","context_source","getContext","canvas_result","context_result","colorArray","addEventListener","e","preventDefault","drawResult","window","onload","initColorpickerLightbox","initInfoLightbox","addRedColorSet","lightbox","addRed","createElement","style","cursor","i","tmp","cssText","concat","append","onclick","push","Color","setHslValue","redrawSelectedColors","close","addGreenColorSet","addBlueColorSet","addYellowColorSet","addBlackColorSet","addOrangeColorSet","colorPicker","ColorPicker","Lightbox","additionalClasses","draggable","setTitle","quickaddText","innerHTML","colorCanvas","addColorButton","display","currentColor","hue","saturation","lightness","setContent","open","drawCircle","context","x","y","size","color","offset","beginPath","arc","Math","PI","fillStyle","fill","val","parseInt","value","image_url","files","length","file","URL","createObjectURL","new_image","Image","src","clearRect","canvas_width","canvas_height","naturalHeight","naturalWidth","setAttribute","drawImage","generateDrawing","alert","element_size","compareType","total_rows","floor","total_cols","col","row","image_data","getImageData","data","color_data","getAverageColor","avColor","setRgbValue","red","green","blue","closesColorFromArray","getColorClosestByHsl","getColorClosestByHue","getColorClosestByRgb","hslColor","hsl","colorDrawer","forEach","splice","backgroundColor","filename","name","querySelector","imageDataArray","counter","tmpColor","alpha","infoLightbox","openAnimation","closeAnimation","drawing","size_slider","oninput","_classCallCheck","this","rgb","hex","console","warn","rgb2Hsl","rgbToHex","hsl2rgb","test","hexToRgb","newRed","newGreen","newBlue","max","min","diff","f","n","k","arguments","undefined","a","result","exec","hexRed","toString","hexGreen","hexBlue","targetColor","smallestIndex","colorDiffs","map","arrayColor","colorDiffByRgb","smallestDiff","el","index","getHueDistance","abs","colorNum","color1","color2","sqrt","hue1","hue2","d","_this","canvas","ctx","canvasWidth","offsetWidth","canvasHeight","offsetHeight","scaleX","scaleY","j","fillRect","ceil","selecting","circle","after","remove","rect","getBoundingClientRect","win","ownerDocument","defaultView","mousePosX","pageX","left","pageXOffset","mousePosY","pageY","top","pageYOffset","maxTop","maxBottom","maxLeft","maxRight","circleTop","circleLeft","mousePercentageX","mousePercentageY","round","options","isOpen","setDefaultSettings","updateSettings","setupDomElements","setEscapeKeyToCloseLightbox","draggableLightbox","clickOutsideToClose","container","classList","add","animationDuration","className","inner","closeHandler","title","WebkitUserSelect","MozUserSelect","msUserSelect","userSelect","closeable","appendingElement","_this2","closeByEscape","keyCode","_this3","target","_this4","isDragging","currentTop","currentLeft","mouseDown","initialDragX","type","touches","initialDragY","mouseMove","tmpX","mouseUp","keepInBounds","boundsOffset","puffer","returnValue","wentAbove","wentBelow","wentLeft","wentRight","offsetTop","innerHeight","bottom","minTop","getComputedStyle","getPropertyValue","offsetLeft","innerWidth","right","minLeft","opened","closed","destroyed","key","hasOwnProperty","_typeof","Element","HTMLDocument","suboptions","subkey","_this5","_this6","resetPosition","overflow","setTimeout","_this7"],"mappings":"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","file":"../js/app.min.js","sourcesContent":["let canvas_source = document.getElementById(\"canvas_source\");\nlet context_source = canvas_source.getContext(\"2d\");\n\nlet canvas_result = document.getElementById(\"canvas_result\");\nlet context_result = canvas_result.getContext(\"2d\");\n\nlet colorArray = [];\n\ndocument.getElementById(\"form\").addEventListener(\"submit\", e => {\n  e.preventDefault();\n  drawResult();\n});\n\nwindow.onload = () => {\n  initColorpickerLightbox();\n  initInfoLightbox();\n};\n","const addRedColorSet = lightbox => {\r\n  const addRed = document.createElement(\"div\");\r\n  addRed.style.cursor = \"pointer\";\r\n  for (let i = 1; i < 11; i++) {\r\n    let tmp = document.createElement(\"div\");\r\n    tmp.style.cssText = `border: 1px solid #000; width: 10px; height: 10px; background-color: hsl(0,100%,${i *\r\n      10}%); display: inline-block; margin-right: 5px`;\r\n    addRed.append(tmp);\r\n  }\r\n  addRed.onclick = () => {\r\n    for (let i = 1; i < 11; i++) {\r\n      colorArray.push(new Color().setHslValue(0, 100, i * 10));\r\n    }\r\n\r\n    redrawSelectedColors();\r\n    lightbox.close();\r\n  };\r\n  return addRed;\r\n};\r\n\r\nconst addGreenColorSet = lightbox => {\r\n  const addRed = document.createElement(\"div\");\r\n  addRed.style.cursor = \"pointer\";\r\n  for (let i = 1; i < 11; i++) {\r\n    let tmp = document.createElement(\"div\");\r\n    tmp.style.cssText = `border: 1px solid #000; width: 10px; height: 10px; background-color: hsl(120,100%,${i *\r\n      10}%); display: inline-block; margin-right: 5px`;\r\n    addRed.append(tmp);\r\n  }\r\n  addRed.onclick = () => {\r\n    for (let i = 1; i < 11; i++) {\r\n      colorArray.push(new Color().setHslValue(120, 100, i * 10));\r\n    }\r\n\r\n    redrawSelectedColors();\r\n    lightbox.close();\r\n  };\r\n  return addRed;\r\n};\r\n\r\nconst addBlueColorSet = lightbox => {\r\n  const addRed = document.createElement(\"div\");\r\n  addRed.style.cursor = \"pointer\";\r\n  for (let i = 1; i < 11; i++) {\r\n    let tmp = document.createElement(\"div\");\r\n    tmp.style.cssText = `border: 1px solid #000; width: 10px; height: 10px; background-color: hsl(240,100%,${i *\r\n      10}%); display: inline-block; margin-right: 5px`;\r\n    addRed.append(tmp);\r\n  }\r\n  addRed.onclick = () => {\r\n    for (let i = 1; i < 11; i++) {\r\n      colorArray.push(new Color().setHslValue(240, 100, i * 10));\r\n    }\r\n\r\n    redrawSelectedColors();\r\n    lightbox.close();\r\n  };\r\n  return addRed;\r\n};\r\n\r\nconst addYellowColorSet = lightbox => {\r\n  const addRed = document.createElement(\"div\");\r\n  addRed.style.cursor = \"pointer\";\r\n  for (let i = 1; i < 11; i++) {\r\n    let tmp = document.createElement(\"div\");\r\n    tmp.style.cssText = `border: 1px solid #000; width: 10px; height: 10px; background-color: hsl(60,100%,${i *\r\n      10}%); display: inline-block; margin-right: 5px`;\r\n    addRed.append(tmp);\r\n  }\r\n  addRed.onclick = () => {\r\n    for (let i = 1; i < 11; i++) {\r\n      colorArray.push(new Color().setHslValue(60, 100, i * 10));\r\n    }\r\n\r\n    redrawSelectedColors();\r\n    lightbox.close();\r\n  };\r\n  return addRed;\r\n};\r\n\r\nconst addBlackColorSet = lightbox => {\r\n  const addRed = document.createElement(\"div\");\r\n  addRed.style.cursor = \"pointer\";\r\n  for (let i = 1; i < 11; i++) {\r\n    let tmp = document.createElement(\"div\");\r\n    tmp.style.cssText = `border: 1px solid #000; width: 10px; height: 10px; background-color: hsl(0,0%,${i *\r\n      10}%); display: inline-block; margin-right: 5px`;\r\n    addRed.append(tmp);\r\n  }\r\n  addRed.onclick = () => {\r\n    for (let i = 1; i < 11; i++) {\r\n      colorArray.push(new Color().setHslValue(0, 0, i * 10));\r\n    }\r\n\r\n    redrawSelectedColors();\r\n    lightbox.close();\r\n  };\r\n  return addRed;\r\n};\r\n\r\nconst addOrangeColorSet = lightbox => {\r\n  const addRed = document.createElement(\"div\");\r\n  addRed.style.cursor = \"pointer\";\r\n  for (let i = 1; i < 11; i++) {\r\n    let tmp = document.createElement(\"div\");\r\n    tmp.style.cssText = `border: 1px solid #000; width: 10px; height: 10px; background-color: hsl(30,100%,${i *\r\n      10}%); display: inline-block; margin-right: 5px`;\r\n    addRed.append(tmp);\r\n  }\r\n  addRed.onclick = () => {\r\n    for (let i = 1; i < 11; i++) {\r\n      colorArray.push(new Color().setHslValue(30, 100, i * 10));\r\n    }\r\n\r\n    redrawSelectedColors();\r\n    lightbox.close();\r\n  };\r\n  return addRed;\r\n};\r\n","const initColorpickerLightbox = () => {\r\n  let colorPicker = new ColorPicker();\r\n\r\n  const lightbox = new Lightbox({\r\n    additionalClasses: [\"align-right\"],\r\n    draggable: true\r\n  }).setTitle(\"Colorpicker\");\r\n\r\n  const quickaddText = document.createElement(\"p\");\r\n  quickaddText.innerHTML = \"<br>Quickadd Colorsets:\";\r\n\r\n  const colorCanvas = document.getElementById(\"canvas_colorpicker\");\r\n  const addColorButton = document.createElement(\"button\");\r\n  addColorButton.innerHTML = \"Add color\";\r\n  addColorButton.style.display = \"block\";\r\n  addColorButton.addEventListener(\"click\", e => {\r\n    colorArray.push(\r\n      new Color().setHslValue(\r\n        colorPicker.currentColor.hue,\r\n        colorPicker.currentColor.saturation,\r\n        colorPicker.currentColor.lightness\r\n      )\r\n    );\r\n    redrawSelectedColors();\r\n  });\r\n\r\n  //ADD MONOCHROMATIC RED\r\n\r\n  lightbox.setContent([\r\n    colorCanvas,\r\n    addColorButton,\r\n    quickaddText,\r\n    addRedColorSet(lightbox),\r\n    addOrangeColorSet(lightbox),\r\n    addYellowColorSet(lightbox),\r\n    addGreenColorSet(lightbox),\r\n    addBlueColorSet(lightbox),\r\n    addBlackColorSet(lightbox)\r\n  ]);\r\n\r\n  document.getElementById(\"color-button\").addEventListener(\"click\", e => {\r\n    lightbox.open();\r\n  });\r\n};\r\n","const drawCircle = (context, x, y, size, color) => {\r\n  let offset = size / 2;\r\n  context.beginPath();\r\n  context.arc(x + offset, y + offset, offset, 0, 2 * Math.PI);\r\n  context.fillStyle = color;\r\n  context.fill();\r\n};\r\n","const drawResult = () => {\r\n  let val = parseInt(document.getElementById(\"element_size\").value);\r\n  \r\n  if (typeof val === \"number\" && val > 2) {\r\n    let file_chooser = document.getElementById(\"fileChooser\");\r\n    let files = file_chooser.files;\r\n    let image_url;\r\n    if (files.length) {\r\n      let file = files[0];\r\n      image_url = window.URL.createObjectURL(file);\r\n    } else {\r\n      image_url = \"res/sample.jpg\";\r\n    }\r\n\r\n    let new_image = new Image();\r\n    new_image.src = image_url;\r\n\r\n    context_source.clearRect(0, 0, canvas_width, canvas_height);\r\n    new_image.addEventListener(\"load\", () => {\r\n      canvas_height = new_image.naturalHeight;\r\n      canvas_width = new_image.naturalWidth;\r\n\r\n      canvas_source.setAttribute(\"height\", canvas_height);\r\n      canvas_source.setAttribute(\"width\", canvas_width);\r\n\r\n      canvas_result.setAttribute(\"height\", canvas_height);\r\n      canvas_result.setAttribute(\"width\", canvas_width);\r\n\r\n      context_source.drawImage(new_image, 0, 0);\r\n      generateDrawing(val);\r\n    });\r\n  } else {\r\n    alert(\"Please enter a valid number larger than 2\");\r\n  }\r\n};\r\n\r\nconst generateDrawing = element_size => {\r\n  \r\n  let compareType = document.getElementById(\"compare_type\").value;\r\n\r\n  context_result.clearRect(0, 0, canvas_width, canvas_height);\r\n\r\n  const total_rows = Math.floor(canvas_width / element_size);\r\n  const total_cols = Math.floor(canvas_height / element_size);\r\n  let x = 0;\r\n  let y = 0;\r\n\r\n  for (let col = 0; col < total_cols; col++) {\r\n    for (let row = 0; row < total_rows; row++) {\r\n      let image_data = context_source.getImageData(\r\n        x,\r\n        y,\r\n        element_size,\r\n        element_size\r\n      ).data;\r\n\r\n      let color_data = getAverageColor(image_data);\r\n      let avColor = new Color().setRgbValue(\r\n        color_data.red,\r\n        color_data.green,\r\n        color_data.blue\r\n      );\r\n\r\n      let closesColorFromArray;\r\n      if (compareType === \"hsl\") {\r\n        closesColorFromArray = Color.getColorClosestByHsl(avColor, colorArray);\r\n      } else if (compareType === \"hue\") {\r\n        closesColorFromArray = Color.getColorClosestByHue(avColor, colorArray);\r\n      } else {\r\n        closesColorFromArray = Color.getColorClosestByRgb(avColor, colorArray);\r\n      }\r\n\r\n      let hslColor = `hsl(${closesColorFromArray.hsl.hue}, ${closesColorFromArray.hsl.saturation}%, ${closesColorFromArray.hsl.lightness}%)`;\r\n\r\n      drawCircle(context_result, x, y, element_size, hslColor);\r\n\r\n      x += element_size;\r\n    }\r\n    x = 0;\r\n    y += element_size;\r\n  }\r\n};\r\n","const redrawSelectedColors = () => {\r\n  const colorDrawer = document.getElementById(\"color-drawer\");\r\n\r\n  colorDrawer.innerHTML = \"\";\r\n\r\n  colorArray.forEach((color, i) => {\r\n    let tmp = document.createElement(\"div\");\r\n    tmp.addEventListener(\"click\", () => {\r\n      colorArray.splice(i, 1);\r\n      redrawSelectedColors();\r\n    });\r\n    tmp.style.backgroundColor = `hsl(${color.hsl.hue}, ${color.hsl.saturation}%, ${color.hsl.lightness}%)`;\r\n    colorDrawer.append(tmp);\r\n  });\r\n};\r\n","document.getElementById(\"fileChooser\").addEventListener(\"change\", e => {\r\n  let filename = document.getElementById(\"fileChooser\").files[0].name;\r\n  if (filename) {\r\n    document.querySelector(\".form__label\").innerHTML = filename;\r\n  }\r\n});\r\n","const getAverageColor = imageDataArray => {\r\n  let counter = 0;\r\n  let tmpColor = {\r\n    red: 0,\r\n    green: 0,\r\n    blue: 0,\r\n    alpha: 0\r\n  };\r\n  for (let i = 0; i < imageDataArray.length; i++) {\r\n    if (i % 4 === 0) {\r\n      tmpColor.red += imageDataArray[i];\r\n    } else if (i % 4 === 1) {\r\n      tmpColor.green += imageDataArray[i];\r\n    } else if (i % 4 === 2) {\r\n      tmpColor.blue += imageDataArray[i];\r\n    } else if (i % 4 === 3) {\r\n      tmpColor.alpha += imageDataArray[i];\r\n      counter++;\r\n    }\r\n  }\r\n  let finalColor = {\r\n    red: tmpColor.red / counter,\r\n    green: tmpColor.green / counter,\r\n    blue: tmpColor.blue / counter,\r\n    alpha: tmpColor.alpha / counter\r\n  };\r\n  return finalColor;\r\n};\r\n","const initInfoLightbox = () => {\r\n  const infoLightbox = new Lightbox({\r\n    additionalClasses: [\"align-right\"],\r\n    openAnimation: \"buildup\",\r\n    closeAnimation: \"collapse\",\r\n    draggable: true\r\n  })\r\n    .setTitle(\"Color compare methods\")\r\n    .setContent(\r\n      `\r\n      <h2>What are color compare methods?</h2>\r\n      <p>\r\n        Colors can be defined by several values. One is RGB which defines\r\n        the value for red, green and blue with a value between 0 and 255 \r\n        where 0 is no amount of that color and 255 is all the value of \r\n        that color. rgb(255, 255, 0) for example would be a mix of all \r\n        red and all green with no blue, so it would result in a bright \r\n        yellow.\r\n      </p>\r\n      <p>Another way is hsl which stands for hue, saturation and lightness.</p>\r\n      <p>\r\n        Since there are several ways to look at color, there are also\r\n        more than one distinct way to compare colors to oneanother.\r\n        And with this tool you can experiment with three of them\r\n      </p>\r\n      <ul>\r\n        <li>RGB - Will compare the colors by the squared average of all color values added. This one will usually provide the best results for this task</li>\r\n        <li>Hue - Will compare by the hue of the color. Saturation and lightness however will not be taken into consideration here.</li>\r\n        <li>HSL - The same as Hue but will also take saturation and lightness into effect</li>\r\n      </ul>\r\n      <p>Feel free to experiment with different color combinations and compare methods</p>\r\n      `\r\n    );\r\n\r\n  const handler = document.getElementById(\"info_handler\");\r\n  handler.onclick = () => {\r\n    infoLightbox.open();\r\n  };\r\n};\r\n","let drawing = new Image();\r\nlet canvas_width = 0;\r\nlet canvas_height = 0;\r\n\r\ndrawing.src = \"res/sample.jpg\";\r\n\r\ndrawing.addEventListener(\"load\", () => {\r\n  canvas_height = drawing.naturalHeight;\r\n  canvas_width = drawing.naturalWidth;\r\n\r\n  canvas_source.setAttribute(\"height\", canvas_height);\r\n  canvas_source.setAttribute(\"width\", canvas_width);\r\n\r\n  canvas_result.setAttribute(\"height\", canvas_height);\r\n  canvas_result.setAttribute(\"width\", canvas_width);\r\n\r\n  context_source.drawImage(drawing, 0, 0);\r\n\r\n  for (let i = 0; i < 10; i++) {\r\n    colorArray.push(new Color().setHslValue(0, 0, i * 10));\r\n  }\r\n\r\n  redrawSelectedColors();\r\n\r\n  generateDrawing(20);\r\n});\r\n","const size_slider = document.getElementById(\"size_slider\");\r\nsize_slider.oninput = () => {\r\n  document.getElementById(\"element_size\").value = size_slider.value;\r\n};\r\n\r\nsize_slider.addEventListener(\"change\", () => {\r\n  drawResult();\r\n});\r\n","/**\r\n * Represents a color. Has functions to convert from\r\n * one format to another and many other functionalities\r\n * like comparing colors, inverting them and so on\r\n * @class Color\r\n * @author {Lukas Meier}\r\n */\r\nclass Color {\r\n  /**\r\n   * Constructs a new color and sets all values to black\r\n   */\r\n  constructor() {\r\n    this.rgb = { red: 0, green: 0, blue: 0 };\r\n    this.hsl = { hue: 0, saturation: 0, lightness: 0 };\r\n    this.hex = \"#000000\";\r\n  }\r\n\r\n  /**\r\n   * Will set the color using red, green and blue values\r\n   * @param {Number} red The red color value (0 - 255)\r\n   * @param {Number} green The green color value (0 - 255)\r\n   * @param {Number} blue The blue color value (0 - 255)\r\n   * @returns {Color} The Color-Object\r\n   */\r\n  setRgbValue(red, green, blue) {\r\n    if (red < 0 || red > 255) {\r\n      console.warn(`Red is out of bounds.`);\r\n      return false;\r\n    }\r\n    if (green < 0 || green > 255) {\r\n      console.warn(`Green is out of bounds.`);\r\n      return false;\r\n    }\r\n    if (blue < 0 || blue > 255) {\r\n      console.warn(`Blue is out of bounds.`);\r\n      return false;\r\n    }\r\n\r\n    this.rgb.red = red;\r\n    this.rgb.green = green;\r\n    this.rgb.blue = blue;\r\n\r\n    const hsl = Color.rgb2Hsl(red, green, blue);\r\n    this.hsl = hsl;\r\n\r\n    const hex = Color.rgbToHex(red, green, blue);\r\n    if (hex) {\r\n      this.hex = hex;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Will set the color using hue, saturation and lightness\r\n   * @param {Number} hue The hue of the color (0 - 360)\r\n   * @param {Number} saturation The saturation of the color (0 - 100)\r\n   * @param {Number} lightness The lightness of the color (0 - 100)\r\n   * @returns {Color} The Color-Object\r\n   */\r\n  setHslValue(hue, saturation, lightness) {\r\n    if (hue > 360 || hue < 0) {\r\n      console.warn(\r\n        `The hue cannot be larger than 360 or negative. It was ${hue}`\r\n      );\r\n      return false;\r\n    }\r\n\r\n    if (saturation > 360 || saturation < 0) {\r\n      console.warn(\r\n        `The saturation cannot be larger than 100 or negative. It was ${saturation}`\r\n      );\r\n      return false;\r\n    }\r\n\r\n    if (lightness > 360 || lightness < 0) {\r\n      console.warn(\r\n        `The lightness  cannot be larger than 100 or negative. It was ${lightness}`\r\n      );\r\n      return false;\r\n    }\r\n\r\n    this.hsl.hue = hue;\r\n    this.hsl.saturation = saturation;\r\n    this.hsl.lightness = lightness;\r\n\r\n    const rgb = Color.hsl2rgb(hue, saturation, lightness);\r\n\r\n    this.rgb = rgb;\r\n\r\n    const hex = Color.rgbToHex(rgb.red, rgb.green, rgb.blue);\r\n    if (hex) {\r\n      this.hex = hex;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Will set the color by using the hex format\r\n   * @param {String} hex The hex-value of the color\r\n   * @returns {Color} The Color-Object\r\n   */\r\n  setHexValue(hex) {\r\n    const regex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\r\n    if (!regex.test(hex)) {\r\n      console.warn(`${hex} is not a correct hex-value`);\r\n      return false;\r\n    }\r\n    this.hex = hex;\r\n\r\n    const rgb = Color.hexToRgb(hex);\r\n    if (rgb) {\r\n      this.rgb = rgb;\r\n      const hsl = Color.rgb2Hsl(rgb.red, rgb.green, rgb.blue);\r\n      this.hsl = hsl;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Will invert the color\r\n   * @returns {Color} The newly inverted Color Object\r\n   */\r\n  invert() {\r\n    let newRed = 255 - this.rgb.red;\r\n    let newGreen = 255 - this.rgb.green;\r\n    let newBlue = 255 - this.rgb.blue;\r\n    this.setRgbValue(newRed, newGreen, newBlue);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Will convert a rgb value to the hsl format\r\n   * @param {Number} red The red color value (0 - 255)\r\n   * @param {Number} green The green color value (0 - 255)\r\n   * @param {Number} blue The blue color value (0 - 255)\r\n   * @returns {Object} An Object containing the color in the hsl format\r\n   */\r\n  static rgb2Hsl(red, green, blue) {\r\n    red /= 255;\r\n    green /= 255;\r\n    blue /= 255;\r\n\r\n    let max = Math.max(red, green, blue);\r\n    let min = Math.min(red, green, blue);\r\n\r\n    let hue;\r\n    let saturation;\r\n    let lightness = (max + min) / 2;\r\n\r\n    if (max == min) {\r\n      // achromatic\r\n      hue = 0;\r\n      saturation = 0;\r\n    } else {\r\n      let diff = max - min;\r\n      saturation =\r\n        lightness > 0.5 ? diff / (2 - max - min) : diff / (max + min);\r\n\r\n      switch (max) {\r\n        case red:\r\n          hue = (green - blue) / diff + (green < blue ? 6 : 0);\r\n          break;\r\n        case green:\r\n          hue = (blue - red) / diff + 2;\r\n          break;\r\n        case blue:\r\n          hue = (red - green) / diff + 4;\r\n          break;\r\n      }\r\n\r\n      hue /= 6;\r\n    }\r\n\r\n    return {\r\n      hue: hue * 360,\r\n      saturation: saturation * 100,\r\n      lightness: lightness * 100\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Will convert a hsl value to the rgb format\r\n   * @param {Number} hue The hue of the color (0 - 360)\r\n   * @param {Number} saturation The percentage of the saturation (0 - 100)\r\n   * @param {Number} lightness The percentage of the lightness (0 - 100)\r\n   */\r\n  static hsl2rgb(hue, saturation, lightness) {\r\n    saturation /= 100;\r\n    lightness /= 100;\r\n\r\n    let a = saturation * Math.min(lightness, 1 - lightness);\r\n    let f = (n, k = (n + hue / 30) % 12) => {\r\n      return lightness - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\r\n    };\r\n\r\n    return {\r\n      red: Math.floor(f(0) * 255),\r\n      green: Math.floor(f(8) * 255),\r\n      blue: Math.floor(f(4) * 255)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Converts the given hex value to rgb\r\n   * @param {String} hex The hex value of the color\r\n   * @returns {Object} The converted red, green and blue values or false if no valid hex was passed;\r\n   */\r\n  static hexToRgb(hex) {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n\r\n    if (!result) {\r\n      console.warn(`${hex} is not a valid hex-value so it cannot be converted`);\r\n      return false;\r\n    }\r\n\r\n    return {\r\n      red: parseInt(result[1], 16),\r\n      green: parseInt(result[2], 16),\r\n      blue: parseInt(result[3], 16)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Converts a rgb value to its corresponding hex value\r\n   * @param {Number} red The red color value (0 - 255)\r\n   * @param {Number} green The green color value (0 - 255)\r\n   * @param {Number} blue The blue color value (0 - 255)\r\n   * @returns {String} The color in a hex value\r\n   */\r\n  static rgbToHex(red, green, blue) {\r\n    if (\r\n      red > 255 ||\r\n      green > 255 ||\r\n      blue > 255 ||\r\n      red < 0 ||\r\n      green < 0 ||\r\n      blue < 0\r\n    ) {\r\n      console.warn(\r\n        `Either the red, green or blue value is out of bounds. It has to be between 0 and 255`\r\n      );\r\n    }\r\n\r\n    let hexRed = red.toString(16);\r\n    let hexGreen = green.toString(16);\r\n    let hexBlue = blue.toString(16);\r\n    hexRed = hexRed.length == 1 ? \"0\" + hexRed : hexRed;\r\n    hexGreen = hexGreen.length == 1 ? \"0\" + hexGreen : hexGreen;\r\n    hexBlue = hexBlue.length == 1 ? \"0\" + hexBlue : hexBlue;\r\n\r\n    return `#${hexRed}${hexGreen}${hexBlue}`;\r\n  }\r\n\r\n  /**\r\n   * Will search an array of colors and return the one that matches the\r\n   * first given color the closest based on the squared rgb difference.\r\n   * @param {Color} color A color that should be searched for\r\n   * @param {Color[]} colorArray An array containing several colors.\r\n   * @returns {Color} The color matching the first parameter the closest will be returned\r\n   */\r\n  static getColorClosestByRgb(targetColor, colorArray) {\r\n    let colorDiffs = colorArray.map(arrayColor => {\r\n      return Color.colorDiffByRgb(arrayColor, targetColor);\r\n    });\r\n\r\n    let smallestDiff = 1000;\r\n    let smallestIndex;\r\n    colorDiffs.map((el, index) => {\r\n      smallestIndex = el < smallestDiff ? index : smallestIndex;\r\n      smallestDiff = el < smallestDiff ? el : smallestDiff;\r\n    });\r\n\r\n    return colorArray[smallestIndex];\r\n  }\r\n\r\n  /**\r\n   * Will search an array of colros and return the one that matches\r\n   * the first given color the closest based on the hue.\r\n   * @param {Color} targetColor The color that should be searched for\r\n   * @param {Color[]} colorArray An array containing colors.\r\n   * @returns {Color} The color matching the first parameter the closest will be returned\r\n   */\r\n  static getColorClosestByHue(targetColor, colorArray) {\r\n    var colorDiffs = colorArray.map(arrayColor => {\r\n      return Color.getHueDistance(arrayColor.hsl.hue, targetColor.hsl.hue);\r\n    });\r\n\r\n    let smallestDiff = 1000;\r\n    let smallestIndex;\r\n    colorDiffs.map((el, index) => {\r\n      smallestIndex = el < smallestDiff ? index : smallestIndex;\r\n      smallestDiff = el < smallestDiff ? el : smallestDiff;\r\n    });\r\n\r\n    return colorArray[smallestIndex];\r\n  }\r\n\r\n  /**\r\n   * Will search an array of colros and return the one that matches\r\n   * the first given color the closest based on the hue, saturation and lightness.\r\n   * @param {Color} targetColor The color that should be searched for\r\n   * @param {Color[]} colorArray An array containing colors.\r\n   * @returns {Color} The color matching the first parameter the closest will be returned\r\n   */\r\n  static getColorClosestByHsl(targetColor, colorArray) {\r\n    var colorDiffs = colorArray.map(\r\n      arrayColor =>\r\n        Math.abs(Color.colorNum(arrayColor) - Color.colorNum(targetColor)) +\r\n        Color.getHueDistance(arrayColor.hsl.hue, targetColor.hsl.hue)\r\n    );\r\n\r\n    let smallestDiff = 1000;\r\n    let smallestIndex;\r\n    colorDiffs.map((el, index) => {\r\n      smallestIndex = el < smallestDiff ? index : smallestIndex;\r\n      smallestDiff = el < smallestDiff ? el : smallestDiff;\r\n    });\r\n\r\n    return colorArray[smallestIndex];\r\n  }\r\n\r\n  /**\r\n   * Calculates the squred difference between all red, green and blue values\r\n   * @param {Color} color1 The first color\r\n   * @param {Color} color2 The second color\r\n   * @returns {Number} The calculated difference\r\n   */\r\n  static colorDiffByRgb(color1, color2) {\r\n    return Math.sqrt(\r\n      (color1.rgb.red - color2.rgb.red) * (color1.rgb.red - color2.rgb.red) +\r\n        (color1.rgb.green - color2.rgb.green) *\r\n          (color1.rgb.green - color2.rgb.green) +\r\n        (color1.rgb.blue - color2.rgb.blue) *\r\n          (color1.rgb.blue - color2.rgb.blue)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Will return the distance between 2 hues\r\n   * @param {Number} hue1 The hue of the first color\r\n   * @param {Number} hue2 The hue of the second color\r\n   * @returns {Number} The distance between the hues\r\n   */\r\n  static getHueDistance(hue1, hue2) {\r\n    d = Math.abs(hue1 - hue2);\r\n    return d > 180 ? 360 - d : d;\r\n  }\r\n\r\n  /**\r\n   * Converts a number to it's number value\r\n   * @param {Color} color The color that should be converted\r\n   * @returns {Number}\r\n   */\r\n  static colorNum(color) {\r\n    let factorSat = 1;\r\n    let factorLi = 1;\r\n    return color.hsl.saturation * factorSat + color.hsl.lightness * factorLi;\r\n  }\r\n}\r\n","class ColorPicker {\r\n  constructor() {\r\n    this.canvas = document.getElementById(\"canvas_colorpicker\");\r\n    this.ctx = this.canvas.getContext(\"2d\");\r\n    this.canvasWidth = this.canvas.offsetWidth;\r\n    this.canvasHeight = this.canvas.offsetHeight;\r\n\r\n    this.scaleX = this.canvasWidth / 360;\r\n    this.scaleY = this.canvasHeight / 100;\r\n\r\n    this.currentColor = null;\r\n\r\n    let x = 0;\r\n    let y = 0;\r\n\r\n    let hue = 0;\r\n    let saturation = 100;\r\n    let lightness = 100;\r\n\r\n    for (let i = 0; i < 100; i++) {\r\n      for (let j = 0; j < 360; j++) {\r\n        this.ctx.fillStyle = `hsl(${hue}, ${saturation}%, ${lightness}%)`;\r\n        this.ctx.fillRect(\r\n          x,\r\n          y,\r\n          Math.ceil(this.scaleX + 1),\r\n          Math.ceil(this.scaleY + 1)\r\n        );\r\n        x += this.scaleX;\r\n        hue = j;\r\n      }\r\n      lightness -= 1;\r\n      x = 0;\r\n      y += 1;\r\n    }\r\n\r\n    this.canvas.addEventListener(\"mousedown\", e => {\r\n      this.selecting = true;\r\n      this.circle = document.createElement(\"div\");\r\n      this.circle.style.cssText =\r\n        \"background-color: red; border-radius: 50%; width: 10px; height: 10px; position: fixed; top: 0; left: 0; transform: translate(-50%, -50%); border: 1px solid #000;\";\r\n\r\n      this.canvas.after(this.circle);\r\n    });\r\n\r\n    document.addEventListener(\"mouseup\", () => {\r\n      if (!this.selecting) return false;\r\n      this.selecting = false;\r\n      this.circle.remove();\r\n    });\r\n\r\n    document.addEventListener(\"mousemove\", e => {\r\n      if (!this.selecting) return false;\r\n\r\n      let rect = this.canvas.getBoundingClientRect();\r\n      let win = this.canvas.ownerDocument.defaultView;\r\n\r\n      let mousePosX = e.pageX - rect.left + win.pageXOffset;\r\n      let mousePosY = e.pageY - rect.top + win.pageYOffset;\r\n\r\n      mousePosX = mousePosX < 0 ? 0 : mousePosX;\r\n      mousePosY = mousePosY < 0 ? 0 : mousePosY;\r\n\r\n      let maxTop = rect.top + win.pageYOffset;\r\n      let maxBottom = rect.top + win.pageYOffset + this.canvas.offsetHeight;\r\n\r\n      let maxLeft = rect.left + win.pageXOffset;\r\n      let maxRight = rect.left + win.pageXOffset + this.canvas.offsetWidth;\r\n\r\n      let circleTop = e.pageY;\r\n      let circleLeft = e.pageX;\r\n\r\n      if (e.pageY < maxTop) {\r\n        circleTop = maxTop;\r\n      } else if (e.pageY > maxBottom) {\r\n        circleTop = maxBottom;\r\n      }\r\n\r\n      if (e.pageX < maxLeft) {\r\n        circleLeft = maxLeft;\r\n      } else if (e.pageX > maxRight) {\r\n        circleLeft = maxRight;\r\n      }\r\n\r\n      this.circle.style.top = circleTop + \"px\";\r\n      this.circle.style.left = circleLeft + \"px\";\r\n\r\n      mousePosX = mousePosX > this.canvasWidth ? this.canvasWidth : mousePosX;\r\n      mousePosY = mousePosY > this.canvasHeight ? this.canvasHeight : mousePosY;\r\n\r\n      mousePercentageX = mousePosX / this.canvasWidth;\r\n      mousePercentageY = mousePosY / this.canvasHeight;\r\n\r\n      let hue = Math.round(360 * mousePercentageX);\r\n      let lightness = Math.round(100 - 100 * mousePercentageY);\r\n\r\n      let a = document.querySelector(\".lightbox__data\");\r\n      a.style.backgroundColor = `hsl(${hue}, 100%, ${lightness}%)`;\r\n\r\n      this.currentColor = { hue: hue, saturation: 100, lightness: lightness };\r\n\r\n      this.circle.style.backgroundColor = `hsl(${hue}, 100%, ${lightness}%)`;\r\n    });\r\n  }\r\n}\r\n","/**\r\n * Represents a lightbox that can be used to display information\r\n * to the user by being displayed on the top layer of the page\r\n *\r\n * @class Lightbox\r\n */\r\nclass Lightbox {\r\n  /**\r\n   * Sets up the basic structure and DOM of the lightbox\r\n   * @author {Lukas Meier}\r\n   * @param {Object} options The options to configure the lightbox\r\n   *  @param {(String|String[])} options.additionalClasses Additional classes that will be added to the lightbox\r\n   *  @param {Boolean} options.closeable If set to false, all triggers to close the lightbox will be automatically overwritten\r\n   *  @param {Boolean} options.draggable If set to true, the lightbox can be dragged by grabbing the titlebar\r\n   *  @param {Boolean} options.closeHandler If set to false, the lightbox will have no close button in the top right\r\n   *  @param {Boolean} options.closeByEscape If set to false, the lightbox can't be closed by pressing escape\r\n   *  @param {Boolean} options.clickOutsideToClose If set to true, the lightbox can be closed by clicking outside of it\r\n   *  @param {String} options.openAnimation The animation that should be used to open the lightbox. Use: grow, fadein, jelly or fadedown\r\n   *  @param {String} options.closeAnimation The animation that should be used to close the lightbox. Use: shrink, fadeout or fadeup\r\n   *  @param {Number} options.animationDuration The duration of the animation in milliseconds\r\n   *  @param {Number} options.boundsOffset If the lightbox is dragged outside of the page it will snap back with this margin\r\n   *  @param {Boolean} options.keepInBounds If set to true, the lightbox will snap back into bounds if dragged outside\r\n   *  @param {HTMLElement} options.appendingElement The Lightbox will be appended to this element. The body is strongly recommended here, as it is the default anyways.\r\n   *  @param {Function} options.open Callback that gets called when the lightbox starts opening\r\n   *  @param {Function} options.opened Callback that gets called when the lightbox finished opening\r\n   *  @param {Function} options.close Callback that gets called when the lightbox starts closing\r\n   *  @param {Function} options.closed Callback that gets called when the lightbox finished closing\r\n   *  @param {Function} options.destroyed Callback that gets called when the lightbox is destroyed\r\n   * @returns {Lightbox} The created lightbox object.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    this.isOpen = false;\r\n\r\n    this.setDefaultSettings();\r\n    this.updateSettings(options);\r\n\r\n    this.setupDomElements();\r\n\r\n    this.setEscapeKeyToCloseLightbox();\r\n    this.draggableLightbox();\r\n    this.clickOutsideToClose();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Will create the DOM-Elements and place them at the end of the body\r\n   * @author {Lukas Meier}\r\n   * @returns {void}\r\n   */\r\n  setupDomElements() {\r\n    this.container = document.createElement(\"div\");\r\n    this.container.classList.add(\"lightbox\");\r\n    this.container.style.animationDuration = `${this.options.animationDuration}ms`;\r\n\r\n    if (\r\n      this.options.additionalClasses &&\r\n      this.options.additionalClasses.length\r\n    ) {\r\n      if (typeof this.options.additionalClasses === \"string\") {\r\n        this.container.classList.add(this.options.additionalClasses);\r\n      } else {\r\n        this.options.additionalClasses.forEach(className => {\r\n          this.container.classList.add(className);\r\n        });\r\n      }\r\n    }\r\n\r\n    this.inner = document.createElement(\"div\");\r\n    this.inner.classList.add(\"lightbox__inner\");\r\n    this.inner.classList.add(`lightbox__inner--${this.options.openAnimation}`);\r\n    this.inner.style.animationDuration = `${this.options.animationDuration}ms`;\r\n\r\n    this.closeHandler = document.createElement(\"div\");\r\n    this.closeHandler.classList.add(\"lightbox__close-handler\");\r\n\r\n    this.title = document.createElement(\"p\");\r\n    this.title.classList.add(\"lightbox__title\");\r\n\r\n    if (this.options.draggable) {\r\n      this.title.style.cursor = \"move\";\r\n      this.title.style.WebkitUserSelect = \"none\";\r\n      this.title.style.MozUserSelect = \"none\";\r\n      this.title.style.msUserSelect = \"none\";\r\n      this.title.style.userSelect = \"none\";\r\n    }\r\n\r\n    this.closeHandler.onclick = () => {\r\n      this.close();\r\n    };\r\n\r\n    this.data = document.createElement(\"div\");\r\n    this.data.classList.add(\"lightbox__data\");\r\n\r\n    if (this.options.closeHandler && this.options.closeable) {\r\n      this.inner.append(this.closeHandler);\r\n    }\r\n\r\n    this.inner.append(this.title);\r\n    this.inner.append(this.data);\r\n    this.container.append(this.inner);\r\n    this.options.appendingElement.append(this.container);\r\n  }\r\n\r\n  /**\r\n   * Adds an eventlistener to the document to\r\n   * allow the user to close the lightbox\r\n   * by pressing the escape key\r\n   * @author {Lukas Meier}\r\n   * @returns {Boolean} true if eventlistener has been set, false otherwise\r\n   */\r\n  setEscapeKeyToCloseLightbox() {\r\n    if (!this.options.closeByEscape || !this.options.closeable) return false;\r\n    document.addEventListener(\"keydown\", e => {\r\n      if (e.keyCode === 27 && this.isOpen) {\r\n        this.close();\r\n      }\r\n    });\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Sets a clicklistener to close the lightbox by\r\n   * clicking outside of it.\r\n   * @author {Lukas Meier}\r\n   * @returns {Boolean} true if eventlistener has been set, false otherwise\r\n   */\r\n  clickOutsideToClose() {\r\n    if (!this.options.clickOutsideToClose || !this.options.closeable)\r\n      return false;\r\n    this.container.addEventListener(\"click\", e => {\r\n      if (e.target === this.container) {\r\n        this.close();\r\n      }\r\n    });\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Will add several eventlisteners that allow\r\n   * the user to drag the lightbox by dragging\r\n   * the title bar.\r\n   * @author {Lukas Meier}\r\n   * @returns {Boolean} true if eventlisteners have been set, false otherwise\r\n   */\r\n  draggableLightbox() {\r\n    if (!this.options.draggable) return false;\r\n\r\n    this.isDragging = false;\r\n    this.currentTop = 0;\r\n    this.currentLeft = 0;\r\n\r\n    const mouseDown = e => {\r\n      this.isDragging = true;\r\n      this.initialDragX = e.type === \"touchmove\" ? e.touches[0].pageX : e.pageX;\r\n      this.initialDragY = e.type === \"touchmove\" ? e.touches[0].pageY : e.pageY;\r\n    };\r\n\r\n    const mouseMove = e => {\r\n      if (!this.isDragging) return false;\r\n\r\n      e.preventDefault();\r\n\r\n      let tmpX = e.type === \"touchmove\" ? e.touches[0].pageX : e.pageX;\r\n      let tmpY = e.type === \"touchmove\" ? e.touches[0].pageY : e.pageY;\r\n\r\n      const top = tmpY - this.initialDragY + this.currentTop;\r\n      const left = tmpX - this.initialDragX + this.currentLeft;\r\n\r\n      this.inner.style.top = `${top}px`;\r\n      this.inner.style.left = `${left}px`;\r\n    };\r\n\r\n    const mouseUp = e => {\r\n      if (!this.isDragging) return false;\r\n      this.isDragging = false;\r\n      this.currentTop = parseInt(this.inner.style.top);\r\n      this.currentLeft = parseInt(this.inner.style.left);\r\n\r\n      this.currentTop = this.currentTop ? this.currentTop : 0;\r\n      this.currentLeft = this.currentLeft ? this.currentLeft : 0;\r\n\r\n      if (this.options.keepInBounds) {\r\n        this.keepInBounds(this.options.boundsOffset);\r\n      }\r\n    };\r\n\r\n    this.title.addEventListener(\"mousedown\", e => mouseDown(e));\r\n    this.title.addEventListener(\"touchstart\", e => mouseDown(e), false);\r\n\r\n    document\r\n      .querySelector(\"body\")\r\n      .addEventListener(\"mousemove\", e => mouseMove(e));\r\n    document\r\n      .querySelector(\"body\")\r\n      .addEventListener(\"touchmove\", e => mouseMove(e));\r\n\r\n    document.querySelector(\"body\").addEventListener(\"mouseup\", e => mouseUp(e));\r\n    document\r\n      .querySelector(\"body\")\r\n      .addEventListener(\"touchend\", e => mouseUp(e));\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Will reset the draggin position of the lightbox\r\n   * @author {Lukas Meier}\r\n   * @returns {Boolean} true if position has been reset, false otherwise\r\n   */\r\n  resetPosition() {\r\n    if (this.options.draggable) {\r\n      this.inner.style.top = 0;\r\n      this.inner.style.left = 0;\r\n      this.currentLeft = 0;\r\n      this.currentTop = 0;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Will check if the Lightbox is outside of the window\r\n   * and force it back inside. This way, the user cannot\r\n   * drag the handler outsite of the bounds.\r\n   * @author {Lukas Meier}\r\n   * @param {Number} puffer If the lightbox is out of bounds, it will have this number as a margin to the bounds.\r\n   * @returns {Object} Containing which bounds have been crossed\r\n   */\r\n  keepInBounds(puffer) {\r\n    let returnValue = {\r\n      wentAbove: false,\r\n      wentBelow: false,\r\n      wentLeft: false,\r\n      wentRight: false\r\n    };\r\n\r\n    //Prevent the box from going above the page bounds\r\n    if (this.inner.offsetTop < 0) {\r\n      const tmp = this.currentTop + Math.abs(this.inner.offsetTop) + puffer;\r\n      this.inner.style.top = `${tmp}px`;\r\n      this.currentTop = tmp;\r\n      returnValue.wentAbove = true;\r\n    }\r\n\r\n    //Prevent the box from going below the page bounds\r\n    else if (\r\n      this.inner.offsetTop + this.inner.offsetHeight >\r\n      window.innerHeight\r\n    ) {\r\n      const bottom = this.inner.offsetTop + this.inner.offsetHeight + puffer;\r\n      const diff = window.innerHeight - bottom;\r\n      const tmp = this.currentTop + diff;\r\n      this.inner.style.top = `${tmp}px`;\r\n      this.currentTop = tmp;\r\n\r\n      const marginTop = parseInt(\r\n        window.getComputedStyle(this.inner, null).getPropertyValue(\"margin-top\")\r\n      );\r\n\r\n      const minTop = (marginTop - puffer) * -1;\r\n      if (this.currentTop < minTop) {\r\n        this.currentTop = minTop;\r\n        this.inner.style.top = `${minTop}px`;\r\n      }\r\n\r\n      returnValue.wentBelow = true;\r\n    }\r\n\r\n    //Prevent the box from going left of the page bounds\r\n    if (this.inner.offsetLeft < 0) {\r\n      const tmp = this.currentLeft + Math.abs(this.inner.offsetLeft) + puffer;\r\n      this.inner.style.left = `${tmp}px`;\r\n      this.currentLeft = tmp;\r\n      returnValue.wentLeft = true;\r\n    }\r\n\r\n    //Prevent the box from going right of the page bounds\r\n    else if (\r\n      this.inner.offsetLeft + this.inner.offsetWidth >\r\n      window.innerWidth\r\n    ) {\r\n      const right = this.inner.offsetLeft + this.inner.offsetWidth + puffer;\r\n      const diff = window.innerWidth - right;\r\n      const tmp = this.currentLeft + diff;\r\n      this.inner.style.left = `${tmp}px`;\r\n      this.currentLeft = tmp;\r\n\r\n      const marginLeft = parseInt(\r\n        window\r\n          .getComputedStyle(this.inner, null)\r\n          .getPropertyValue(\"margin-left\")\r\n      );\r\n\r\n      const minLeft = (marginLeft - puffer) * -1;\r\n      if (this.currentLeft < minLeft) {\r\n        this.currentLeft = minLeft;\r\n        this.inner.style.left = `${minLeft}px`;\r\n      }\r\n\r\n      returnValue.wentRight = true;\r\n    }\r\n\r\n    return returnValue;\r\n  }\r\n\r\n  /**\r\n   * Sets the settings to the default values. This is called\r\n   * on initialisation and can be used to reset all settings.\r\n   * @author {Lukas Meier}\r\n   * @returns {void}\r\n   */\r\n  setDefaultSettings() {\r\n    this.options = {};\r\n    this.options.additionalClasses = [];\r\n    this.options.closeable = true;\r\n    this.options.draggable = false;\r\n    this.options.closeHandler = true;\r\n    this.options.closeByEscape = true;\r\n    this.options.openAnimation = \"fadedown\";\r\n    this.options.closeAnimation = \"fadeup\";\r\n    this.options.clickOutsideToClose = true;\r\n    this.options.animationDuration = 500;\r\n    this.options.boundsOffset = 20;\r\n    this.options.keepInBounds = true;\r\n    this.options.appendingElement = document.querySelector(\"body\");\r\n    this.options.open = () => {};\r\n    this.options.opened = () => {};\r\n    this.options.close = () => {};\r\n    this.options.closed = () => {};\r\n    this.options.destroyed = () => {};\r\n  }\r\n\r\n  /**\r\n   * Overrites default settings with custom ones.\r\n   * @author {Lukas Meier}\r\n   * @param {Object} options - Optional settings object.\r\n   * @returns {void}\r\n   */\r\n  updateSettings(options) {\r\n    for (let key in options) {\r\n      if (key === \"appendingElement\" && !options.appendingElement) {\r\n        console.warn(\r\n          \"The Element to append the lightbox to, could not be found. It will be appended to the body instead.\"\r\n        );\r\n      }\r\n\r\n      if (options.hasOwnProperty(key)) {\r\n        if (typeof options[key] === \"object\") {\r\n          if (\r\n            options[key] instanceof Element ||\r\n            options[key] instanceof HTMLDocument\r\n          ) {\r\n            this.options[key] = options[key];\r\n          } else {\r\n            let suboptions = options[key];\r\n            for (let subkey in suboptions) {\r\n              if (suboptions.hasOwnProperty(subkey)) {\r\n                this.options[key][subkey] = suboptions[subkey];\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          this.options[key] = options[key];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Will set the content of the lightbox\r\n   * @author {Lukas Meier}\r\n   * @param {(String|Object)} data The data to display. Can be a String, a HTMLObject or an Array of either.\r\n   * @param {String} title The title displayed in the top left of the lightbox\r\n   * @returns {Lightbox} The current Lightbox-Object\r\n   */\r\n  setContent(data) {\r\n    this.data.innerHTML = \"\";\r\n\r\n    if (typeof data === \"object\") {\r\n      if (data.length) {\r\n        data.forEach(el => {\r\n          if (typeof el === \"string\") {\r\n            this.data.innerHTML += el;\r\n          } else {\r\n            this.data.append(el);\r\n          }\r\n        });\r\n      } else {\r\n        this.data.append(data);\r\n      }\r\n    } else {\r\n      this.data.innerHTML = data;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Will set the Title of the Lightbox\r\n   * @param {String} title The title to set in the lightbox\r\n   * @author {Lukas Meier}\r\n   * @returns {Lightbox} The current Lightbox-Object\r\n   */\r\n  setTitle(title) {\r\n    title = title ? title : \"\";\r\n    this.title.innerHTML = title;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gives the lightbox the --open modifier which\r\n   * is used by CSS to make the lightbox visible\r\n   * @author {Lukas Meier}\r\n   * @returns {Lightbox} The current Lightbox-Object\r\n   */\r\n  open() {\r\n    this.options.open();\r\n    this.resetPosition();\r\n    this.container.classList.add(\"lightbox--open\");\r\n    this.container.classList.add(\"lightbox--opening\");\r\n    document.querySelector(\"body, html\").style.overflow = \"hidden\";\r\n    setTimeout(() => {\r\n      this.container.classList.remove(\"lightbox--opening\");\r\n      this.isOpen = true;\r\n      this.options.opened();\r\n    }, this.options.animationDuration);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes the --open modifier from the lightbox\r\n   * is used by CSS to make the lightbox visible\r\n   * @author {Lukas Meier}\r\n   * @returns {Lightbox} The current Lightbox-Object\r\n   */\r\n  close() {\r\n    this.options.close();\r\n    this.inner.classList.add(`lightbox__inner--${this.options.closeAnimation}`);\r\n    this.container.classList.add(\"lightbox--closing\");\r\n    setTimeout(() => {\r\n      this.container.classList.remove(\"lightbox--open\");\r\n      this.container.classList.remove(\"lightbox--closing\");\r\n      this.isOpen = false;\r\n      document.querySelector(\"body, html\").style.overflow = \"auto\";\r\n      this.inner.classList.remove(\r\n        `lightbox__inner--${this.options.closeAnimation}`\r\n      );\r\n      this.options.closed();\r\n    }, this.options.animationDuration);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Will remove all traces of the lightbox from the DOM\r\n   * and calls the destroyed callback.\r\n   * @author {Lukas Meier}\r\n   * @returns {void}\r\n   */\r\n  destroy() {\r\n    this.container.remove();\r\n    this.inner.remove();\r\n    this.closeHandler.remove();\r\n    this.title.remove();\r\n    this.data.remove();\r\n    this.options.destroyed();\r\n  }\r\n}\r\n"]}